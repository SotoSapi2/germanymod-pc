# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  TARGET_ARCH: amd64
  BUILD_PATH: ${{github.workspace}}/build
  EXPERIMENTAL_BUILD_PATH: ${{github.workspace}}/experimental-build
  COMMIT_ID: ${{github.sha}:0:7}

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{env.TARGET_ARCH}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{env.BUILD_PATH}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja -DENABLE_CONSOLE=TRUE
        cmake -B ${{env.EXPERIMENTAL_BUILD_PATH}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja -DENABLE_CONSOLE=TRUE -DEXPERIMENTAL_CHEAT_FEATURE=TRUE

    - name: Build
      run: cmake --build ${{env.BUILD_PATH}} --config ${{env.BUILD_TYPE}}

    - name: Build Experimental
      run: cmake --build ${{env.EXPERIMENTAL_BUILD_PATH}} --config ${{env.BUILD_TYPE}}

    - name: Create Artifact Archive
      run: |
          Compress-Archive -Path "${{env.BUILD_PATH}}/nazimod-loader.exe", "${{env.BUILD_PATH}}/nazimod-runtime.dll", "${{env.BUILD_PATH}}/assets/" -DestinationPath "${{github.workspace}}/nazimodpc-${{env.COMMIT_ID}}.zip"
          Compress-Archive -Path "${{env.EXPERIMENTAL_BUILD_PATH}}/nazimod-loader.exe", "${{env.EXPERIMENTAL_BUILD_PATH}}/nazimod-runtime.dll", "${{env.EXPERIMENTAL_BUILD_PATH}}/assets/" -DestinationPath "${{github.workspace}}/nazimodpc-experimental-${{env.COMMIT_ID}}.zip"

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-app-build
        path: "${{github.workspace}}/artifact.zip"
        retention-days: 7

    - name: Send to Discord Webhook
      run: |
          # PowerShell script block to handle JSON and file upload.
          # Get the full commit message from the GitHub event context.
          $commit_message = "${{ github.event.head_commit.message }}"
          $commit_url = "${{ github.event.head_commit.url }}"

          # Split the message into a title (first line) and description (rest).
          $message_lines = $commit_message.Split("`n")
          $title = $message_lines[0]
          $description = $message_lines[1..($message_lines.Count - 1)] -join "`n"

          # Create the JSON payload for the Discord embed.
          # We use a here-string to build the JSON.
          $json_payload = @"
          {
            "content": "✅ **Bleeding-edge build of a commit.**",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "color": 3447003,
                "url": "$commit_url"
              }
            ]
          }
          "@

          curl -F "file1=@${{github.workspace}}/nazimodpc-${{env.COMMIT_ID}}.zip" `
               -F "file2=@${{github.workspace}}/nazimodpc-experimental-${{env.COMMIT_ID}}.zip" `
               -F "payload_json=$json_payload" `
               ${{env.DISCORD_WEBHOOK_URL}}

  notify-on-failure:
    name: Notify on Build Failure
    runs-on: windows-latest
    needs: [build]
    if: failure()

    steps:
    - name: "Send build failure to discord webhook"
      run: | 
        $commit_message = "${{ github.event.head_commit.message }}"
        $commit_url = "${{ github.event.head_commit.url }}"

        $message_lines = $commit_message.Split("`n")
        $title = $message_lines[0]
        $description = $message_lines[1..($message_lines.Count - 1)] -join "`n"

        $json_payload = @"
          {
            "content": "❌ **Commit failed to build.**",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "color": 16711680,
                "url": "$commit_url"
              }
            ]
          }
          "@

          curl -F "payload_json=$json_payload" `
               ${{env.DISCORD_WEBHOOK_URL}}

