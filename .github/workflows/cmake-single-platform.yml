# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Create Artifact Archive
      run: Compress-Archive -Path 
           "build/${{env.BUILD_TYPE}}/nazimod-loader.exe", 
           "build/${{env.BUILD_TYPE}}/nazimod-runtime-exe", 
           "assets" 
           -DestinationPath "artifact.zip"

    - name: Send to Discord Webhook
      run: |
          # PowerShell script block to handle JSON and file upload.
          # Get the full commit message from the GitHub event context.
          $commit_message = "${{ github.event.head_commit.message }}"
          $commit_url = "${{ github.event.head_commit.url }}"

          # Split the message into a title (first line) and description (rest).
          $message_lines = $commit_message.Split("`n")
          $title = $message_lines[0]
          $description = $message_lines[1..($message_lines.Count - 1)] -join "`n"

          # Create the JSON payload for the Discord embed.
          # We use a here-string to build the JSON.
          $json_payload = @"
          {
            "content": "**Bleeding-edge build of a commit.**",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "color": 3447003,
                "url": "$commit_url"
              }
            ]
          }
          "@

          curl -F "nazimodpc-${{github.sha}}.zip=@artifact.zip" `
               -F "payload_json=$json_payload" `
               $DISCORD_WEBHOOK_URL